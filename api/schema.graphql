type ListRow {
  ID: Int!
  UUID: String!
  Title: String!
  Description: String
  ColorHex: String
  TaskUUIDs: String
  ParentListUUID: String
  SubListUUIDs: String
  SharedWithUserUUIDs: String
  CreationInformationUUID: String!
}

input CreateListInput {
  title: String!
  description: String
  colorHex: String
  taskUuids: String
  parentListUuid: String
  subListUuids: String
  sharedWithUserUuids: String
}

input CreateCreationInformationInput {
  creatorUserUuid: String!
}

input CreateTaskInput {
  content: String!
  priority: Int
  tagUuids: String
  isComplete: Boolean
}

type Mutation {
  createUser(input: CreateUserInput!): UserRow!
  createList(
    creationInformationInput: CreateCreationInformationInput!
    listInput: CreateListInput!
  ): ListRow!
  addTaskToList(listUuid: String!, taskUuid: String!): ListRow!
  createTask(
    creationInformationInput: CreateCreationInformationInput!
    taskInput: CreateTaskInput!
  ): TaskRow!
}

input CreateUserInput {
  username: String!
  password: String!
  nickname: String!
}

type Query {
  allUsers: [UserRow!]!
  allLists: [ListRow!]!
}

type UserRow {
  ID: Int!
  UUID: String!
  Username: String!
  PasswordHash: String!
  Nickname: String!
}

type TaskRow {
  ID: Int!
  UUID: String!
  Content: String!
  Priority: Int!
  TagUUIDs: String
  IsComplete: Boolean!
  CreationInformationUUID: String!
}
